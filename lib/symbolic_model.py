import numpy as np
import pandas as pd

@np.vectorize
def valence(x):
    magic = [2,8,20,28,50,82,126,184]
    if x in magic:
        return 0
    else:
        residual = x
        for i in magic:
            if np.abs(i-x) < np.abs(residual):
                residual = np.abs(i-x)
        return residual

@np.vectorize
def pairing(Z, N, aP):
    A = Z + N
    delta = aP * A ** (-1 / 2)
    if (Z % 2 == 1) and (N % 2 == 1):
        delta *= -1
    if (A % 1 == 1):
        delta = 0
    return delta

def volume(Z, N, aV):
    A = Z + N
    return aV * A

def surface(Z, N, aS):
    A = Z + N
    return aS * A ** (2 / 3)

def coulomb(Z, N, aC):
    A = Z + N
    return aC * Z * (Z - 1) / (A ** (1 / 3))

def asymmetry(Z, N, aA):
    A = Z + N
    return aA * (N - Z) ** 2 / A

def shell_helper(Z, N, aN, c1n, c2n, aZ, c1z, c2z, c3n, c3z, c4n, c4z):
    v_ns = {}
    if isinstance(N, collections.abc.Iterable):
        iter = np.array(N)
    else:
        iter = np.array([N])
    for n in iter:
        v_ns[n] = valence(n)
    v_zs = {}
    if isinstance(Z, collections.abc.Iterable):
        iter = np.array(Z)
    else:
        iter = np.array([Z])
    for z in iter:
        v_zs[z] = valence(z)
    x_n = v_ns[N] - aN
    x_z = v_zs[Z] - aZ
    res = c1n*x_n + c2n*x_n**2 + c3n*x_n**3 + c4n*x_n**4
    res += c1z*x_z + c2z*x_z**2 + c3z*x_z**3 + c4z*x_z**4
    return res

def shifted_piecewise_piecewise_shell(Z, N, args):
    a1z, a2z, a3z, a4z, a1n, a2n, a3n, a4n, b1z, b2z, b3z, b4z, b1n, b2n, b3n, b4n, c1z, c2z, c3z, c4z, c1n, c2n, c3n, c4n, d1z, d2z, d3z, d4z, d1n, d2n, d3n, d4n, e1n, e2n, e3n, e4n, aN1, aN2, aN3, aN4, aN5, aZ1, aZ2, aZ3, aZ4 = args
    res = []
    for n,z in zip(N, Z):
        args = []
        if n<28:
            args.extend([aN1, a1n, a2n, a3n, a4n])
        elif n<50:
            args.extend([aN2, b1n, b2n, b3n, b4n])
        elif n<82:
            args.extend([aN3, c1n, c2n, c3n, c4n])
        elif n<126:
            args.extend([aN4, d1n, d2n, d3n, d4n])
        else:
            args.extend([aN5, e1n, e2n, e3n, e4n])

        if z<28:
            args.extend([aZ1, a1z, a2z, a3z, a4z])
        elif z<50:
            args.extend([aZ2, b1z, b2z, b3z, b4z])
        elif z<82:
            args.extend([aZ3, c1z, c2z, c3z, c4z])
        else:
            args.extend([aZ4, d1z, d2z, d3z, d4z])
        res.append(shell_helper(z, n, *args))
    return res

def double_power_law(x, args):
    a1, b1, c1, d1, a2, b2, c2, d2 = args
    x = np.float64(x)
    b1 = np.clip(b1, -1000, 1000)
    b2 = np.clip(b2, -1000, 1000)   

    c1 = np.clip(c1, -10, 10)   
    c2 = np.clip(c2, -10, 10)   
    return a1 * np.sign(x-b1) * (np.abs(x-b1)) ** c1 + d1 + a2 * np.sign(x-b2) * (np.abs(x-b2)) ** c2 + d2

def fit_pc2_double_power_law_exp_diff(X, args):
    a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3 = args
    Z, N = X
    b1 = np.clip(b1, -1000, 1000)   
    b2 = np.clip(b2, -1000, 1000)   

    c1 = np.clip(c1, -10, 10)   
    c2 = np.clip(c2, -10, 10)   
    dbl_pwr_law = a1 * np.sign(Z-b1) * (np.abs(Z-b1)) ** c1 + d1 + a2 * np.sign(Z-b2) * (np.abs(Z-b2)) ** c2 + d2
    exp_i = a3 * np.exp(b3 * (N-Z-c3)) + d3
    return dbl_pwr_law + exp_i

def magic_nums_exp(N, Z, args):
    a1, b1, c1, a2, b2, c2 = args
    d1 = np.sqrt((N-82)**2 + (Z-50)**2)
    d2 = np.sqrt((N-126)**2 + (Z-82)**2)
    res = a1*np.exp(-b1*d1 + c1)
    res += a2*np.exp(-b2*d2 + c2)
    return res

@np.vectorize
def ws3_pairing(N, Z, aP2):
    A = N+Z
    res = aP2*A**(-1/3)
    I = np.abs(N-Z)/A
    if (N%2)==0 and (Z%2)==0:
        res *= 2-I
    elif (N%2)==1 and (Z%2)==1:
        res *= I
    elif (N%2)==0 and (Z%2)==1 and N>Z:
        res *= 1-I
    elif (N%2)==1 and (Z%2)==0 and N<Z:
        res *= 1-I
    return res

def linear_fit(x, m, b):
    return m*x + b

def line_exp(N, Z, args):
    m, b, pitch, shift = args
    res = []
    for n, z in zip(N, Z):
        if z<28:
            pt_on_line = (n+z)/2
            max_val = linear_fit(pt_on_line, m, b)
            dist = np.sqrt((n-pt_on_line)**2 + (z-pt_on_line)**2)
            res.append(max_val*np.exp(-pitch*dist + shift))
        else:
            res.append(0)
    return res

def const_exp(N, Z, args):
    c, pitch, shift = args
    res = []
    for n, z in zip(N, Z):
        if z>27 and z<39:
            pt_on_line = (n+z)/2
            dist = np.sqrt((n-pt_on_line)**2 + (z-pt_on_line)**2)
            res.append(c*np.exp(-pitch*dist + shift))
        else:
            res.append(0)
    return res

def terms_so_far_modified_for_micro_plus_line_plus_const_exp(X, *args):
    args = args[0]
    
    Z, N = X
    res = 0
    res += volume(Z, N, args[0])
    res += surface(Z, N, args[1])
    res += coulomb(Z, N, args[2])
    res += asymmetry(Z, N, args[3])
    res += ws3_pairing(Z, N, args[4])
    res += shifted_piecewise_piecewise_shell(Z, N, args[5:50])
    
    T = N-Z
    res += args[50]*T**4 + args[51]*T**3 + args[52]*T**2 + args[53]*T + args[54]
    
    pc1_m_fit = double_power_law(Z, args[55:63])
    pc1_b_fit = double_power_law(Z, args[63:71])
    res += pc1_m_fit*T + pc1_b_fit
    
    res += fit_pc2_double_power_law_exp_diff(X, args[71:83])
    
    res += magic_nums_exp(N, Z, args[83:89])
    res += line_exp(N, Z, args[89:93])
    res += const_exp(N, Z, args[93:96])

    return res

def vector_help(Z, N, cN, cZ):
    iZ = Z - 12
    iN = N - 7
    return cN[int(iN)] + cZ[int(iZ)]

def symbolic_model(Z, N):
    X = (Z, N)
    args =  [2.72544977e-02, -3.04196757e-03, -8.09403238e-04, -1.70200008e-02,
        6.12020045e-03, -3.44966738e-07,  7.01625967e-08,  1.46837689e-08,
        -1.73444585e-10,  1.02856996e-02, -1.66141515e-04,  1.97408110e+02,
        4.62474517e-03, -6.42548845e-07,  7.16274443e-08,  1.76456043e-08,
        -2.30686892e-10,  4.08914079e-02, -4.12606554e-04, -1.65694445e+02,
        -1.45320276e-02,  1.36950036e-06, -4.59514325e-07,  2.07510925e-07,
        -3.25736630e-09,  6.95890600e-04, -2.52372377e-05, -2.84581161e+00,
        2.08017691e-03,  1.34506292e-06,  2.16914300e-05,  1.16791089e-07,
        1.55809350e-06, -4.63524277e-04, -3.52717241e-06,  9.22832761e+00,
        3.16386288e-03, -5.94208607e-04,  8.04520705e-05,  1.03541383e+01,
        3.17008493e-03, -6.19145851e+01, -6.61744253e+01,  1.30957942e+01,
        1.11302091e+01, -5.00402483e+00,  4.02589389e-05,  4.56037424e-05,
        5.20158024e-05,  8.50766973e-05, -4.00809509e-08, -1.56698172e-06,
        -3.03820483e-04, -1.06552149e-02, -1.75470560e-01,  1.18843762e-04,
        1.80000001e+01,  3.62241231e-01, -1.06296028e-02, -9.23367890e-07,
        3.13407406e+01,  1.98874873e+00, -1.06436641e-02, -6.93735227e-02,
        -2.50968138e+00,  7.87649245e-01, -1.78043784e-01, -1.02158696e-02,
        1.63239716e+01,  9.23896830e-01, -1.76537708e-01, -6.98691956e-03,
        6.24625566e+00,  5.83509979e-01, -1.78082201e-01,  1.97727076e-01,
        -8.36140724e-01,  3.75487979e-01, -1.75958748e-01,  2.15062777e-01,
        2.77581794e-02, -4.14089126e+01, -1.77181537e-01,  1.08519573e-01,
        1.91788096e-01, -2.69883892e+00,  1.84340268e-02,  8.25067422e-02,
        -1.93351019e-01, -6.46264706e-05,  6.28643926e-03,  2.61579137e-01,
        2.25908749e-01,  8.52108879e-03, -6.57962192e-04, -1.27192010e-01,
        6.71075098e-03,  4.70852572e-03,  4.01668118e-03,  6.68274069e-03,
        9.70637979e-03,  1.43538173e-02,  1.73540747e-02,  2.04332702e-02,
        2.39650493e-02,  2.24148776e-02,  2.13509920e-02,  2.08614527e-02,
        2.04428421e-02,  2.43149454e-02,  2.77980380e-02,  3.14721632e-02,
        -4.97167942e-02, -5.07600894e-02, -5.24373297e-02, -5.36135733e-02,
        -5.52398168e-02, -5.67136491e-02, -5.81531804e-02, -5.96332740e-02,
        -6.08617154e-02, -6.22892134e-02, -6.35509269e-02, -5.73855114e-02,
        -5.24349966e-02, -4.76182270e-02, -4.25667566e-02, -3.76385330e-02,
        -3.24495856e-02, -2.74761173e-02, -2.25626091e-02, -1.76581026e-02,
        -1.26866238e-02, -7.86775550e-03, -2.99676209e-03, -4.32206250e-03,
        -5.76099339e-03, -7.06685462e-03, -8.32101199e-03, -9.68583929e-03,
        -1.08751978e-02, -1.23113366e-02, -1.37296526e-02, -1.53123941e-02,
        -1.67569270e-02, -1.84581826e-02, -2.01900043e-02, -2.19901870e-02,
        -2.38993179e-02, -2.59301679e-02, -2.80751358e-02, -2.29103114e-02,
        -1.76706911e-02, -1.26370282e-02, -7.51187440e-03, -2.73917681e-03,
        1.80810104e-03,  6.40852885e-03,  1.07644786e-02,  1.50306169e-02,
        1.90710556e-02,  2.29478574e-02,  2.67091149e-02,  3.04889470e-02,
        3.41513726e-02,  3.76700931e-02,  4.42727935e-02,  4.24234701e-02,
        4.00870519e-02,  3.75380051e-02,  3.50381820e-02,  3.25141285e-02,
        3.01097621e-02,  2.76717775e-02,  2.53731058e-02,  2.30615948e-02,
        2.07864870e-02,  1.84371048e-02,  1.56741816e-02,  1.25777339e-02,
        8.58307714e-03,  3.67366585e-03, -2.49403370e-03, -1.01303526e-02,
        -1.99366130e-02, -3.17034959e-02, -4.67327037e-02, -6.44983617e-02,
        -8.63131469e-02, -6.41191823e-02, -4.60377480e-02, -3.09712840e-02,
        -1.89033412e-02, -9.01119930e-03, -1.65317620e-03,  2.57897675e-02,
        2.16751414e-02,  1.71954863e-02,  1.49091876e-02,  1.20034907e-02,
        9.45131239e-03,  6.33467046e-03,  4.02719439e-03,  3.23354347e-03,
        1.66654070e-03,  2.45989170e-05, -2.22261073e-03, -4.31099296e-03,
        -6.74572066e-03, -9.37326679e-03, -1.15008226e-02, -1.36793884e-02,
        -1.57423864e-02, -1.63674844e-02, -1.73234467e-02, -1.83790117e-02,
        1.89673803e-03,  1.72279980e-03,  6.90226712e-04,  3.83404074e-04,
        -2.57841352e-04, -5.71397830e-04, -1.19820529e-03, -1.50319501e-03,
        -1.86721554e-03, -1.94430267e-03, -1.96250022e-03, -2.21822079e-03,
        -6.06073551e-03, -1.01644985e-02, -1.39455746e-02, -1.79516463e-02,
        -2.15187350e-02, -2.52648731e-02, -2.85010788e-02, -3.17728026e-02,
        -3.46246847e-02, -3.74555495e-02,  1.22227719e-02,  9.17675869e-03,
        5.66339604e-03,  2.57866901e-03, -8.08795310e-04, -3.90323510e-03,
        -7.18349889e-03, -1.03056809e-02, -1.35154867e-02, -1.65282270e-02,
        -1.90270093e-02, -2.16176008e-02, -2.38933113e-02, -2.62854744e-02,
        -2.82888689e-02, -3.04676530e-02, -3.22431597e-02, -3.31157472e-02,
        -3.34149955e-02, -3.40354315e-02, -3.40790281e-02, -3.44473504e-02,
        -3.42363258e-02, -3.43853199e-02, -3.39123328e-02, -3.37741049e-02,
        -3.30812033e-02, -3.26702381e-02, -3.20006634e-02, -3.14756559e-02,
        -3.05254939e-02, -2.98144359e-02, -1.42638807e-02, -1.45077481e-02,
        -1.49129232e-02, -1.51301778e-02, -1.53927110e-02, -1.56925794e-02,
        -1.56239013e-02, -1.57452658e-02, -1.52084413e-02, -1.49113028e-02,
        -1.40586839e-02, -1.34919118e-02, -1.24929143e-02, -1.17491034e-02,
        -1.07516903e-02, -9.86113488e-03, -8.84663581e-03, -7.98040341e-03,
        -7.08348378e-03, -6.36454815e-03, -5.77232902e-03, -5.38898096e-03,
        -5.15232556e-03, -3.39974837e-03, -1.69179964e-03, -3.52791588e-04,
        1.17743158e-03,  2.26581503e-03,  3.63880478e-03,  4.72405429e-03,
        6.15251311e-03,  7.40413858e-03,  9.02629551e-03,  1.06735593e-02,
        1.24838911e-02,  1.42073189e-02,  1.63616922e-02,  1.84123880e-02,
        2.06247985e-02,  2.29329734e-02,  2.53184547e-02,  2.78412472e-02,
        3.04443529e-02,  3.33516452e-02,  4.46659872e-02,  4.67371674e-02,
        4.89196667e-02,  5.10997330e-02,  5.32694677e-02,  5.51654963e-02,
        5.71319689e-02,  5.88242010e-02,  6.01420353e-02,  6.11392268e-02,
        6.18584149e-02,  6.20617902e-02,  6.19319355e-02,  6.10673172e-02,
        5.97595185e-02,  5.76815037e-02,  5.49262884e-02,  5.12847609e-02,
        4.66819462e-02,  4.12573272e-02,  3.44918120e-02,  2.67037673e-02,
        1.74474945e-02,  7.34637340e-03, -4.44092904e-03, -1.73841460e-02,
        -3.21273868e-02, -4.85134309e-02, -6.68785038e-02, -8.68490313e-02,
        -5.30497090e-02, -2.08693763e-02,  9.40679848e-03,  3.83647945e-02,
        6.57658385e-02,  9.19630787e-02]
    vg = np.vectorize(vector_help, excluded=['cN','cZ'])
    cZ = args[96:195]
    cN = args[195:]
    return vg(Z=Z, N=N, cZ=cZ, cN=cN)+terms_so_far_modified_for_micro_plus_line_plus_const_exp(X, args[:96])


